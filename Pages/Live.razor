@page "/live/{GameId?}"
@inject NavigationManager Navigation


<CascadingValue Value="@PlayerColor">
    <CascadingValue Value="@GameState">
        <CascadingValue Value="@GameId">
            <CascadingValue Value="@hubConnection">
                <NavBar></NavBar>
                <div class="rowContainer">


                    <Chess opponent="@opponent"></Chess>
                    <div class="columnContainer">
                        <h2 class="color-blue-light" style="margin: 0.8rem;">@errorMessage</h2>
                        <Timer></Timer>
                        <Chat Messages="@messages"></Chat>
                    </div>
                    
                </div>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>



@code {
    [CascadingParameter]
    private UserStateProvider UserState { get; set; }
    [Parameter]
    public string? GameId { get; set; }
    private HubConnection? hubConnection;
    private List<Tuple<string, string>> messages = new List<Tuple<string, string>>();
    private Player? opponent;
    private string? errorMessage;
    public ColorEnum? PlayerColor;
    public Game? GameState = new Game(0);
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/ChessHub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (username, message) =>
        {
            messages.Add(Tuple.Create(username, message));
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("ReceiveErrorMessage", (message) =>
        {
            errorMessage = message;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string,string>("ReceiveInitializeGame", (serverGameJson, messageString) =>
        {
            errorMessage = messageString;
            ServerGame serverGame = JsonHandler.ServerGameFromJson(serverGameJson);
            opponent = serverGame.PlayerOne.Id == UserState.userId ? serverGame.PlayerTwo : serverGame.PlayerOne;
            GameState = serverGame.game;
            PlayerColor = UserState.userId == serverGame.PlayerOne.Id ? serverGame.PlayerOne.Color : serverGame.PlayerTwo.Color;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("ReceiveUpdateGame", (gameJson) =>
        {
            GameState = JsonHandler.GameFromJson(gameJson);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("ReceiveAddSpectator", (serverGameJson) =>
        {
            errorMessage = "You are spectating";
            ServerGame serverGame = JsonHandler.ServerGameFromJson(serverGameJson);
            GameState = serverGame.game;
            PlayerColor = null;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        if (GameId is not null)
        {
            await hubConnection.SendAsync("AddToGroup", GameId, UserState.userId, UserState.username);
        }

    }
}